#include "base16.h"

#include <assert.h>
/**
 * before:  01234
 * after:   "01234"
*/
static const char * s_base16_encode = "0123456789ABCDEF";
int base16_encode(const uint8_t * raw, int len, char * buf) {
    char * ptr = buf;
    for (int i = 0; i < len; i++) {
        *ptr++ = s_base16_encode[raw[i] >> 4];
        *ptr++ = s_base16_encode[raw[i] & 0x0f];
    }
    *ptr++ = '\0';
    assert( (ptr - buf - 1) == (len * 2) );
    return ptr - buf;
}


/**
 * 0 - 48 - 0011_0000 - 0x30
 * 9 - 57 - 0011_1001 - 0x30
 * A - 65 - 0100_0001 - 0b_0100_0*** 0xF8 |
 * F - 70 - 0100_0110 - 0b_0100_0***
*/
// 0xFF <==> 255
static uint8_t s_base16_decode[128] = {
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,     // 0b_0000_0***
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,     // 0b_0000_1***
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,     // 0b_0001_0***
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,     // 0b_0001_1***
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,     // 0b_0010_0***
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,     // 0b_0010_1***
    0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,     // 0b_0011_0*** <---> 0b_0011_**** 
    0x08, 0x09, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,     // 0b_0011_1***
    
    0xFF, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F, 0xFF,     // 0b_0100_0*** <---> 0b_0100_0***
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,     // 0b_0100_1***
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,     // 0b_0101_0***
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,     // 0b_0101_1***
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,     // 0b_0110_0***
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,     // 0b_0110_1***
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,     // 0b_0111_0***
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,     // 0b_0111_1***
};
int base16_decode(const char * raw, int len, uint8_t * buf) {
    uint8_t * ptr = buf;
    for (int i = 0; i < len; i++) {
        uint8_t hi = s_base16_decode[(uint8_t)(raw[i * 2])];
        uint8_t lo = s_base16_decode[(uint8_t)(raw[i * 2 + 1])];

        *ptr = 0x00;
        if (hi == 0xFF) break;
        *ptr |= hi << 4;
        if (lo == 0xFF) break;
        *ptr |= lo;
        ptr++;
    }
    
    assert( (ptr - buf) == (len >> 1) );
    return ptr - buf;
}

